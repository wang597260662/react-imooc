{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport _classCallCheck from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/src/pages/cpchannelbind/index.js\";\nimport React, { Component } from 'react';\nimport BaseForm from './../../components/BaseForm/index';\nimport axios from './../../../src/axios/index';\nimport CpChannelBindAddForm from './add';\nimport CpChannelBindEditForm from './edit';\n\nvar CpChannelBind =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CpChannelBind, _Component);\n\n  function CpChannelBind() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, CpChannelBind);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CpChannelBind)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this2.state = {\n      list: [],\n      isVisible: false\n    };\n    _this2.params = {\n      page: 1,\n      pageSize: 20\n    };\n\n    _this2.requestSelect = function () {\n      _this2.getCodeTypeList();\n\n      _this2.getMerchantList();\n\n      _this2.getAppIdList();\n    };\n\n    _this2.getCodeTypeList = function () {\n      var _this = _assertThisInitialized(_this2);\n\n      axios.requestSelect(_this, '/common/getCodeTypeList', {}, true, 'codeTypeList');\n    };\n\n    _this2.getMerchantList = function () {\n      var _this = _assertThisInitialized(_this2);\n\n      axios.requestSelect(_this, '/common/getMerchantList', {}, true, 'merchantList');\n    };\n\n    _this2.getAppIdList = function () {\n      var _this = _assertThisInitialized(_this2);\n\n      axios.requestSelect(_this, '/common/getAppIdList', {}, true, 'appIdList');\n    };\n\n    _this2.requestList = function () {\n      var _this = _assertThisInitialized(_this2);\n\n      axios.requestList(_this, '/cpChannelBind/getCpChannelBindInfoList', _this2.params, true);\n    };\n\n    _this2.handleOperate = function (type) {\n      var items = _this2.state.selectedRows;\n\n      if (type) {\n        if (type == 'edit') {\n          if (!items || items.length == 0) {\n            _Modal.info({\n              title: \"提示\",\n              content: '请选择一个CP绑定通道信息!'\n            });\n\n            return;\n          }\n\n          if (items.length > 1) {\n            _Modal.info({\n              title: \"提示\",\n              content: '只能选择一个CP绑定通道信息编辑!'\n            });\n\n            return;\n          }\n\n          var editForm = React.createElement(CpChannelBindEditForm, {\n            type: _this2.state.type,\n            appIdList: _this2.state.appIdList,\n            codeTypeList: _this2.state.codeTypeList,\n            merchantList: _this2.state.merchantList,\n            cpChannelBind: items[0],\n            wrappedComponentRef: function wrappedComponentRef(inst) {\n              _this2.cpChannelBindEditForm = inst;\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          });\n\n          _this2.setState({\n            type: type,\n            isVisible: true,\n            title: '编辑CP绑定通道信息',\n            form: editForm\n          });\n        } else if (type == 'delete') {\n          if (items && items.length >= 1) {\n            var _this = _assertThisInitialized(_this2);\n\n            var ids = [];\n            items.map(function (item) {\n              ids.push(item.id);\n            });\n\n            _Modal.confirm({\n              title: '确认删除',\n              content: '是否要删除选中项',\n              onOk: function onOk() {\n                axios.ajax_post({\n                  url: '/cpChannelBind/deleteCpChannelBindInfos',\n                  data: {\n                    params: {\n                      ids: ids\n                    }\n                  }\n                }).then(function (res) {\n                  if (res.code == 0) {\n                    _this.setState({\n                      isVisible: false,\n                      selectedRowKeys: [],\n                      selectedRows: []\n                    });\n\n                    _message.success(\"删除成功!\");\n\n                    _this.requestList();\n                  } else {\n                    _message.success(\"删除失败!\");\n                  }\n                });\n              }\n            });\n          } else {\n            _Modal.info({\n              title: \"提示\",\n              content: '请选择一个CP通道绑定信息!'\n            });\n\n            return;\n          }\n        } else if (type == 'create') {\n          var addForm = React.createElement(CpChannelBindAddForm, {\n            type: _this2.state.type,\n            appIdList: _this2.state.appIdList,\n            codeTypeList: _this2.state.codeTypeList,\n            merchantList: _this2.state.merchantList,\n            wrappedComponentRef: function wrappedComponentRef(inst) {\n              _this2.cpChannelBindAddForm = inst;\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          });\n\n          _this2.setState({\n            type: type,\n            isVisible: true,\n            title: '创建CP通道绑定',\n            cpChannelBind: null,\n            form: addForm\n          });\n        }\n      }\n    };\n\n    _this2.handleFilter = function (params) {\n      _this2.params.merchantNo = params.merchantNo;\n      _this2.params.merchantName = params.merchantName;\n      _this2.params.codeType = params.codeType;\n      _this2.params.businessName = params.businessName;\n      _this2.params.codeProcess = params.codeProcess;\n\n      _this2.requestList();\n    };\n\n    _this2.handleSubmit = function () {\n      var type = _this2.state.type;\n      var cpChannelBindForm = type == 'create' ? _this2.cpChannelBindAddForm : _this2.cpChannelBindEditForm;\n      cpChannelBindForm.props.form.validateFields(function (err, values) {\n        if (!err) {\n          var data = cpChannelBindForm.props.form.getFieldsValue();\n          var info = type == 'create' ? '新增' : '编辑';\n          axios.ajax_post({\n            url: type == 'create' ? '/cpChannelBind/addCpChannelBindInfo' : '/cpChannelBind/editCpChannelBindInfo',\n            data: {\n              params: data\n            }\n          }).then(function (res) {\n            if (res.code == 0) {\n              cpChannelBindForm.props.form.resetFields();\n\n              _this2.setState({\n                isVisible: false,\n                selectedRowKeys: [],\n                selectedRows: []\n              });\n\n              _message.success(info + \"成功!\");\n\n              _this2.requestList();\n            } else {\n              _message.error(info + \"失败! \" + res.msg);\n            }\n          });\n        }\n      });\n    };\n\n    return _this2;\n  }\n\n  _createClass(CpChannelBind, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.requestSelect();\n      this.requestList();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this = this;\n\n      var formList = [{\n        type: 'INPUT',\n        label: '商户号',\n        field: 'merchantNo',\n        width: 180,\n        placeholder: '请输入查询的商户号'\n      }, {\n        type: 'INPUT',\n        label: '商户名称',\n        field: 'merchantName',\n        width: 180,\n        placeholder: '请输入查询的商户名称'\n      }, {\n        type: 'SELECT',\n        label: 'CodeType',\n        field: 'codeType',\n        width: 180,\n        placeholder: '请输入查询的CodeType',\n        list: _this.state.codeTypeList\n      }, {\n        type: 'INPUT',\n        label: '业务名称',\n        field: 'businessName',\n        width: 180,\n        placeholder: '请输入查询的业务名称'\n      }, {\n        type: 'INPUT',\n        label: '代码流程',\n        field: 'codeProcess',\n        width: 180,\n        placeholder: '请输入查询的代码流程'\n      }]; //设置列名\n\n      var columns = [{\n        title: '商户号',\n        dataIndex: 'merchantNo',\n        width: 80\n      }, {\n        title: '商户名称',\n        dataIndex: 'merchantName',\n        width: 120\n      }, {\n        title: 'AppId',\n        dataIndex: 'appId',\n        width: 40\n      }, {\n        title: 'AppId名称',\n        dataIndex: 'appIdStr',\n        width: 80\n      }, {\n        title: 'CodeType',\n        dataIndex: 'codeType',\n        width: 40\n      }, {\n        title: 'CodeType名称',\n        dataIndex: 'codeTypeStr',\n        width: 80 // render(codeType){\n        //     let data=_this.state.codeTypeList;\n        //     var findVal= data.find(item=>{\n        //         return item.key==codeType;\n        //     })\n        //     return findVal.value;\n        // }\n\n      }, {\n        title: '业务名称',\n        dataIndex: 'businessName',\n        width: 100\n      }, {\n        title: '代码流程',\n        dataIndex: 'codeProcess',\n        width: 100\n      }, {\n        title: '创建时间',\n        dataIndex: 'createTime',\n        width: 100\n      }, {\n        title: '更新时间',\n        dataIndex: 'updateTime',\n        width: 100\n      }]; //最前面的选择框\n\n      var selectedRowKeys = this.state.selectedRowKeys;\n      var rowSelection = {\n        type: 'checkbox',\n        selectedRowKeys: selectedRowKeys,\n        columnWidth: 5,\n        onChange: function onChange(selectedRowKeys, selectedRows) {\n          _this3.setState({\n            selectedRowKeys: selectedRowKeys,\n            selectedRows: selectedRows\n          });\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, \" \", React.createElement(_Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(BaseForm, {\n        formList: formList,\n        filterSubmit: this.handleFilter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      })), React.createElement(_Card, {\n        className: \"operate-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        icon: \"plus\",\n        onClick: function onClick() {\n          return _this3.handleOperate('create');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"\\u65B0\\u589E\\u7ED1\\u5B9A\"), React.createElement(_Button, {\n        type: \"primary\",\n        icon: \"edit\",\n        onClick: function onClick() {\n          return _this3.handleOperate('edit');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"\\u7F16\\u8F91\\u7ED1\\u5B9A\"), React.createElement(_Button, {\n        type: \"primary\",\n        icon: \"delete\",\n        onClick: function onClick() {\n          return _this3.handleOperate('delete');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, \"\\u5220\\u9664\\u7ED1\\u5B9A\")), React.createElement(\"div\", {\n        className: \"content-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(_Table, {\n        bordered: true,\n        size: \"small\",\n        columns: columns,\n        rowSelection: rowSelection,\n        pagination: this.state.pagination,\n        dataSource: this.state.list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      })), React.createElement(_Modal, {\n        title: this.state.title,\n        visible: this.state.isVisible,\n        onOk: this.handleSubmit,\n        onCancel: function onCancel() {\n          if (_this3.state.type == 'create') {\n            _this3.cpChannelBindAddForm.props.form.resetFields();\n          }\n\n          if (_this3.state.type == 'edit') {\n            _this3.cpChannelBindEditForm.props.form.resetFields();\n          }\n\n          _this3.setState({\n            isVisible: false\n          });\n        },\n        width: 1000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, this.state.form));\n    }\n  }]);\n\n  return CpChannelBind;\n}(Component);\n\nexport { CpChannelBind as default };","map":{"version":3,"sources":["/Users/wanghaojie/Ant_Design/cp-channel-support-system/src/pages/cpchannelbind/index.js"],"names":["React","Component","BaseForm","axios","CpChannelBindAddForm","CpChannelBindEditForm","CpChannelBind","state","list","isVisible","params","page","pageSize","requestSelect","getCodeTypeList","getMerchantList","getAppIdList","_this","requestList","handleOperate","type","items","selectedRows","length","info","title","content","editForm","appIdList","codeTypeList","merchantList","inst","cpChannelBindEditForm","setState","form","ids","map","item","push","id","confirm","onOk","ajax_post","url","data","then","res","code","selectedRowKeys","success","addForm","cpChannelBindAddForm","cpChannelBind","handleFilter","merchantNo","merchantName","codeType","businessName","codeProcess","handleSubmit","cpChannelBindForm","props","validateFields","err","values","getFieldsValue","resetFields","error","msg","formList","label","field","width","placeholder","columns","dataIndex","rowSelection","columnWidth","onChange","pagination"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BaseForm from './../../components/BaseForm/index'\nimport axios from './../../../src/axios/index'\nimport { Select, Input,Modal,message,Card,Button,Table,Form ,Icon} from 'antd';\nimport CpChannelBindAddForm from './add';\nimport CpChannelBindEditForm from './edit';\nexport default class CpChannelBind extends Component {\n\n  \n\n    state = {\n        list: [],\n        isVisible: false\n    }\n\n    params = {\n        page: 1,\n        pageSize: 20\n    }\n\n\n    componentDidMount() {\n        this.requestSelect();\n        this.requestList();\n       \n    }\n\n    requestSelect = () => {\n        this.getCodeTypeList();\n        this.getMerchantList();\n        this.getAppIdList();\n    }\n    //获取codeType信息\n    getCodeTypeList = () => {\n        let _this = this;\n        axios.requestSelect(_this, '/common/getCodeTypeList', {}, true, 'codeTypeList');\n    }\n    //获取商户信息\n    getMerchantList = () => {\n        let _this = this;\n        axios.requestSelect(_this, '/common/getMerchantList', {}, true, 'merchantList');\n    }\n    //获取AppidList\n    getAppIdList = () => {\n        let _this = this;\n        axios.requestSelect(_this, '/common/getAppIdList', {}, true, 'appIdList');\n    }\n\n    requestList = () => {\n        let _this = this;\n        axios.requestList(_this, '/cpChannelBind/getCpChannelBindInfoList', this.params, true);\n    }\n\n    handleOperate = (type) => {\n        let items = this.state.selectedRows;\n        if (type) {\n            if (type == 'edit') {\n                if (!items || items.length == 0) {\n                    Modal.info({\n                        title: \"提示\",\n                        content: '请选择一个CP绑定通道信息!'\n                    })\n                    return;\n                }\n                if (items.length > 1) {\n                    Modal.info({\n                        title: \"提示\",\n                        content: '只能选择一个CP绑定通道信息编辑!'\n                    })\n                    return;\n                }\n                const editForm =<CpChannelBindEditForm  type={this.state.type} \n                appIdList={this.state.appIdList}\n                codeTypeList={this.state.codeTypeList} \n                merchantList={this.state.merchantList} cpChannelBind={items[0]}\n                wrappedComponentRef={(inst) => { this.cpChannelBindEditForm = inst; }}/>\n\n                this.setState({\n                    type,\n                    isVisible: true,\n                    title: '编辑CP绑定通道信息',\n                    form:editForm\n                })\n\n\n            } else if (type == 'delete') {\n                if (items && items.length >= 1) {\n                    let _this = this;\n                    let ids = [];\n                    items.map((item) => {\n                        ids.push(item.id) ;\n                    })\n                    Modal.confirm({\n                        title: '确认删除',\n                        content: '是否要删除选中项',\n                        onOk() {\n                            axios.ajax_post({\n                                url: '/cpChannelBind/deleteCpChannelBindInfos',\n                                data: {\n                                    params: {\n                                        ids: ids\n                                    }\n                                }\n                            }).then((res) => {\n                                if (res.code == 0) {\n                                    _this.setState({\n                                        isVisible: false,\n                                        selectedRowKeys:[],\n                                        selectedRows:[]\n                                    })\n                                    message.success(\"删除成功!\");\n                                    _this.requestList();\n\n                                } else {\n                                    message.success(\"删除失败!\");\n                                }\n\n                            })\n                        }\n\n                    })\n\n                } else {\n                    Modal.info({\n                        title: \"提示\",\n                        content: '请选择一个CP通道绑定信息!'\n                    })\n                    return;\n                }\n            } else if (type == 'create') {\n            const addForm=    <CpChannelBindAddForm type={this.state.type} \n            appIdList={this.state.appIdList}\n            codeTypeList={this.state.codeTypeList} \n            merchantList={this.state.merchantList}\n            wrappedComponentRef={(inst) => { this.cpChannelBindAddForm = inst; }} />\n\n                this.setState({\n                    type,\n                    isVisible: true,\n                    title: '创建CP通道绑定',\n                    cpChannelBind: null,\n                    form:addForm\n                }\n                )\n            }\n        }\n\n    }\n\n    //接收baseForm 组件表单中的查询参数\n    handleFilter = (params) => {\n        this.params.merchantNo = params.merchantNo;\n        this.params.merchantName = params.merchantName;\n        this.params.codeType = params.codeType;\n        this.params.businessName = params.businessName;\n        this.params.codeProcess = params.codeProcess;\n        this.requestList();\n    }\n\n    // 创建/编辑cp绑定信息提交\n    handleSubmit = () => {\n        let type = this.state.type;\n        const cpChannelBindForm=type== 'create'?this.cpChannelBindAddForm:this.cpChannelBindEditForm;\n        cpChannelBindForm.props.form.validateFields((err, values) => {\n            if (!err) {\n                let data = cpChannelBindForm.props.form.getFieldsValue();\n                let info = type == 'create' ? '新增' : '编辑';\n                axios.ajax_post({\n                    url: type == 'create' ? '/cpChannelBind/addCpChannelBindInfo' : '/cpChannelBind/editCpChannelBindInfo',\n                    data: {\n                        params: data\n                    }\n                }).then((res) => {\n                    if (res.code == 0) {\n                       cpChannelBindForm.props.form.resetFields();\n                        this.setState({\n                            isVisible: false,\n                            selectedRowKeys:[],\n                            selectedRows:[]\n                        })\n                        message.success(info + \"成功!\");\n                        this.requestList();\n\n                    } else {\n                        message.error(info + \"失败! \" + res.msg);\n                    }\n                })\n            }\n        });\n\n    }\n\n\n    render() {\n        const   _this=this;\n        const formList = [\n            {\n                type: 'INPUT',\n                label: '商户号',\n                field: 'merchantNo',\n                width: 180,\n                placeholder: '请输入查询的商户号'\n            }, {\n                type: 'INPUT',\n                label: '商户名称',\n                field: 'merchantName',\n                width: 180,\n                placeholder: '请输入查询的商户名称'\n            }\n            , {\n                type: 'SELECT',\n                label: 'CodeType',\n                field: 'codeType',\n                width: 180,\n                placeholder: '请输入查询的CodeType',\n                list:_this.state.codeTypeList\n            }, {\n                type: 'INPUT',\n                label: '业务名称',\n                field: 'businessName',\n                width: 180,\n                placeholder: '请输入查询的业务名称'\n            }\n            , {\n                type: 'INPUT',\n                label: '代码流程',\n                field: 'codeProcess',\n                width: 180,\n                placeholder: '请输入查询的代码流程'\n            }\n        ]\n\n        //设置列名\n        const columns = [{\n            title: '商户号',\n            dataIndex: 'merchantNo',\n            width: 80\n        }, {\n            title: '商户名称',\n            dataIndex: 'merchantName',\n            width: 120\n        }, {\n            title: 'AppId',\n            dataIndex: 'appId',\n            width: 40\n        }, {\n            title: 'AppId名称',\n            dataIndex: 'appIdStr',\n            width: 80\n        },{\n            title: 'CodeType',\n            dataIndex: 'codeType',\n            width: 40\n        },{\n            title: 'CodeType名称',\n            dataIndex: 'codeTypeStr',\n            width: 80,\n            // render(codeType){\n            //     let data=_this.state.codeTypeList;\n            //     var findVal= data.find(item=>{\n            //         return item.key==codeType;\n            //     })\n            //     return findVal.value;\n            // }\n        },\n         {\n            title: '业务名称',\n            dataIndex: 'businessName',\n            width: 100\n        }, {\n            title: '代码流程',\n            dataIndex: 'codeProcess',\n            width: 100\n        } , {\n            title: '创建时间',\n            dataIndex: 'createTime',\n            width: 100\n        } , {\n            title: '更新时间',\n            dataIndex: 'updateTime',\n            width: 100\n        } \n\n    ];\n        //最前面的选择框\n        const selectedRowKeys = this.state.selectedRowKeys;\n\n        const rowSelection = {\n            type: 'checkbox',\n            selectedRowKeys,\n            columnWidth: 5,\n            onChange: (selectedRowKeys, selectedRows) => {\n                this.setState({\n                    selectedRowKeys,\n                    selectedRows\n                })\n            }\n        }\n\n        return (\n            <div> <Card >\n                <BaseForm formList={formList} filterSubmit={this.handleFilter} />\n            </Card>\n\n                <Card className='operate-wrap'>\n                    <Button type='primary' icon='plus' onClick={() => this.handleOperate('create')}>新增绑定</Button>\n                    <Button type='primary' icon='edit' onClick={() => this.handleOperate('edit')}>编辑绑定</Button>\n                    <Button type='primary' icon='delete' onClick={() => this.handleOperate('delete')}>删除绑定</Button>\n                </Card>\n                <div className=\"content-wrap\">\n                    <Table\n                        bordered\n                        size='small'\n                        columns={columns}\n                        rowSelection={rowSelection}\n                        pagination={this.state.pagination}\n                        dataSource={this.state.list}\n                    />\n\n                </div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.isVisible}\n                    onOk={this.handleSubmit}\n                    onCancel={() => {\n                     if(  this.state.type== 'create'){\n                        this.cpChannelBindAddForm.props.form.resetFields();\n                     } \n                     if(  this.state.type== 'edit'){\n                        this.cpChannelBindEditForm.props.form.resetFields();\n                     } \n                 \n                        this.setState({\n                            isVisible: false\n                        })\n                    }}\n                    width={1000}\n                    >\n            \n                    {\n                         this.state.form\n                    }\n                </Modal>\n             \n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
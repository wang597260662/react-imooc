{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nimport _classCallCheck from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/Users/wanghaojie/Ant_Design/cp-channel-support-system/src/pages/cpchannelbind/add.js\";\nimport React from 'react';\nimport Utils from './../../utils/utils';\nvar FormItem = _Form.Item;\nvar id = 1;\n\nvar CpChannelBindAddForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CpChannelBindAddForm, _React$Component);\n\n  function CpChannelBindAddForm() {\n    _classCallCheck(this, CpChannelBindAddForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CpChannelBindAddForm).apply(this, arguments));\n  }\n\n  _createClass(CpChannelBindAddForm, [{\n    key: \"render\",\n    // remove = (k) => {\n    //     const { form } = this.props;\n    //     const keys = form.getFieldValue('keys');\n    //     if (keys.length === 1) {\n    //       return;\n    //     }\n    //     form.setFieldsValue({\n    //       keys: keys.filter(key => key !== k),\n    //     });\n    //   }\n    //   add = () => {\n    //     const { form } = this.props;\n    //     const keys = form.getFieldValue('keys');\n    //     const nextKeys = keys.concat(id++);\n    //     form.setFieldsValue({\n    //       keys: nextKeys,\n    //     });\n    //   }\n    value: function render() {\n      var _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue;\n      var formItemLayoutWithOutLabel = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 20,\n            offset: 4\n          }\n        }\n      };\n      var formItemLayout = {\n        labelCol: {\n          span: 5\n        },\n        wrapperCol: {\n          span: 5\n        }\n      };\n      getFieldDecorator('keys', {\n        initialValue: [0]\n      });\n      var keys = getFieldValue('keys'); // const dynamicFormItem = keys.map((k, index) => (\n      //     <div>\n      //         <FormItem label=\"codeType\"  {...formItemLayout}\n      //             key={k}\n      //         >\n      //             {getFieldDecorator(`codeTypes[${k}]`, {\n      //                 validateTrigger: ['onChange', 'onBlur'],\n      //                 rules: [{\n      //                     required: true,\n      //                     message: \"请选择一个CodeType!\",\n      //                 }],\n      //             })(\n      //                 <Select>\n      //                     {Utils.getOptionList(this.props.codeTypeList)}\n      //                 </Select>\n      //             )}\n      //         {\n      //             keys.length > 1 ? (\n      //                 <Icon\n      //                     className=\"dynamic-delete-button\"\n      //                     type=\"minus-circle-o\"\n      //                     disabled={keys.length === 1}\n      //                     onClick={() => this.remove(k)}\n      //                 />\n      //             ) : null\n      //         }\n      //         </FormItem>\n      //         <FormItem label=\"codeName\" {...formItemLayout}>\n      //             {\n      //                 getFieldDecorator(`codeNames[${k}]`, {\n      //                     rules: [{\n      //                         required: true,\n      //                         whitespace: true,\n      //                         message: '请输入代码名称!'\n      //                     }]\n      //                 })(\n      //                     <Input type='text' placeholder='请输入代码名称'></Input>\n      //                 )\n      //             }\n      //         </FormItem>\n      //         <FormItem label=\"codeProcess\"  {...formItemLayout}>\n      //             {\n      //                 getFieldDecorator(`codeProcesss[${k}]`, {\n      //                     rules: [{\n      //                         required: true,\n      //                         whitespace: true,\n      //                         message: '请选择一个代码流程!'\n      //                     }]\n      //                 })(\n      //                     <Select>\n      //                         <Input type='text' placeholder='请输入代码流程'></Input>\n      //                     </Select>\n      //                 )\n      //             }\n      //         </FormItem>\n      //         </div>\n      // ));\n\n      return React.createElement(_Form, {\n        layout: \"inline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({\n        label: \"\\u5546\\u6237\"\n      }, formItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), getFieldDecorator('merchantNo', {\n        rules: [{\n          required: true,\n          message: '请选择一个商户!'\n        }]\n      })(React.createElement(_Select, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, Utils.getOptionList(this.props.merchantList)))), React.createElement(FormItem, Object.assign({\n        label: \"AppId\"\n      }, formItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), getFieldDecorator('appId', {\n        rules: [{\n          required: true,\n          message: '请选择一个appId!'\n        }]\n      })(React.createElement(_Select, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, Utils.getOptionList(this.props.appIdList)))), React.createElement(FormItem, Object.assign({}, formItemLayoutWithOutLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(_Button, {\n        type: \"dashed\",\n        style: {\n          width: '60%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), \" Add field\")));\n    }\n  }]);\n\n  return CpChannelBindAddForm;\n}(React.Component);\n\nexport default CpChannelBindAddForm = _Form.create({})(CpChannelBindAddForm);","map":{"version":3,"sources":["/Users/wanghaojie/Ant_Design/cp-channel-support-system/src/pages/cpchannelbind/add.js"],"names":["React","Utils","FormItem","Item","id","CpChannelBindAddForm","props","form","getFieldDecorator","getFieldValue","formItemLayoutWithOutLabel","wrapperCol","xs","span","offset","sm","formItemLayout","labelCol","initialValue","keys","rules","required","message","getOptionList","merchantList","appIdList","width","Component","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Select, Input,Modal,message,Card,Button,Table,Form ,Icon} from 'antd';\nimport Utils from './../../utils/utils'\nconst FormItem =Form.Item\n\nlet id =1;\nclass CpChannelBindAddForm extends React.Component {\n\n    // remove = (k) => {\n    //     const { form } = this.props;\n\n    //     const keys = form.getFieldValue('keys');\n    \n    //     if (keys.length === 1) {\n    //       return;\n    //     }\n    \n    //     form.setFieldsValue({\n    //       keys: keys.filter(key => key !== k),\n    //     });\n    //   }\n    \n    //   add = () => {\n    //     const { form } = this.props;\n     \n    //     const keys = form.getFieldValue('keys');\n    //     const nextKeys = keys.concat(id++);\n       \n    //     form.setFieldsValue({\n    //       keys: nextKeys,\n    //     });\n    //   }\n    \n\n    render() {\n    \n        const { getFieldDecorator, getFieldValue } = this.props.form;\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: { span: 24, offset: 0 },\n                sm: { span: 20, offset: 4 },\n            },\n        };\n        const formItemLayout = {\n            labelCol: { span: 5 },\n            wrapperCol: { span: 5 }\n        }\n       \n        getFieldDecorator('keys', { initialValue: [0] });\n        const keys = getFieldValue('keys');\n        // const dynamicFormItem = keys.map((k, index) => (\n\n        //     <div>\n        //         <FormItem label=\"codeType\"  {...formItemLayout}\n        //             key={k}\n        //         >\n        //             {getFieldDecorator(`codeTypes[${k}]`, {\n        //                 validateTrigger: ['onChange', 'onBlur'],\n        //                 rules: [{\n        //                     required: true,\n\n        //                     message: \"请选择一个CodeType!\",\n        //                 }],\n        //             })(\n        //                 <Select>\n        //                     {Utils.getOptionList(this.props.codeTypeList)}\n        //                 </Select>\n        //             )}\n        //         {\n        //             keys.length > 1 ? (\n        //                 <Icon\n        //                     className=\"dynamic-delete-button\"\n        //                     type=\"minus-circle-o\"\n        //                     disabled={keys.length === 1}\n        //                     onClick={() => this.remove(k)}\n        //                 />\n        //             ) : null\n        //         }\n\n        //         </FormItem>\n        //         <FormItem label=\"codeName\" {...formItemLayout}>\n        //             {\n\n        //                 getFieldDecorator(`codeNames[${k}]`, {\n        //                     rules: [{\n        //                         required: true,\n        //                         whitespace: true,\n        //                         message: '请输入代码名称!'\n        //                     }]\n        //                 })(\n        //                     <Input type='text' placeholder='请输入代码名称'></Input>\n        //                 )\n        //             }\n        //         </FormItem>\n        //         <FormItem label=\"codeProcess\"  {...formItemLayout}>\n        //             {\n\n        //                 getFieldDecorator(`codeProcesss[${k}]`, {\n        //                     rules: [{\n        //                         required: true,\n        //                         whitespace: true,\n        //                         message: '请选择一个代码流程!'\n        //                     }]\n        //                 })(\n        //                     <Select>\n        //                         <Input type='text' placeholder='请输入代码流程'></Input>\n        //                     </Select>\n        //                 )\n        //             }\n        //         </FormItem>\n\n              \n\n        //         </div>\n          \n        // ));\n\n        return (\n            <Form layout=\"inline\">\n                <FormItem label=\"商户\" {...formItemLayout}>\n                    {\n                        getFieldDecorator('merchantNo', {\n                            rules: [{ required: true, message: '请选择一个商户!' }]\n                        })(\n                            <Select>\n                                {Utils.getOptionList(this.props.merchantList)}\n                            </Select>\n                        )\n                    }\n                </FormItem>\n                <FormItem label=\"AppId\" {...formItemLayout}>\n                    {\n\n                        getFieldDecorator('appId', {\n\n                            rules: [{ required: true, message: '请选择一个appId!' }]\n                        })(\n                            <Select>\n                                {Utils.getOptionList(this.props.appIdList)}\n                            </Select>\n                        )\n                    }\n                </FormItem>\n\n\n                <FormItem {...formItemLayoutWithOutLabel}>\n                    <Button type=\"dashed\"  style={{ width: '60%' }}>\n                        <Icon type=\"plus\" /> Add field\n                   </Button>\n                </FormItem>\n              \n            </Form>\n        );\n    }\n}\n export default CpChannelBindAddForm = Form.create({})(CpChannelBindAddForm);"]},"metadata":{},"sourceType":"module"}